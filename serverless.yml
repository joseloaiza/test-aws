service: test-crud-aws

custom:
  settings:
    CUSTOMERS_TABLE: customers

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: us-east-1
  environment: ${self:custom.settings}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dybamodb:DescribeTable
        - dybamodb:Scan
        - dybamodb:GetItem
        - dybamodb:PutItem
        - dybamodb:UpdateItem
        - dybamodb:DeleteItem
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.settings.CUSTOMERS_TABLE}"

plugins:
  - serverless-iam-roles-per-function
functions:
  getCustomer:
    handler: api.getCustomer
    name: get-customer
    memorySize: 128
    timeout: 5
    events:
      - http:
          path: customer/{customerId}
          method: GET
  createCustomer:
    handler: api.createCustomer
    name: create-customer
    memorySize: 128
    timeout: 5
    events:
      - http:
          path: customer
          method: POST
  updateCustomer:
    handler: api.updateCustomer
    name: update-customer
    memorySize: 128
    timeout: 5
    events:
      - http:
          path: customer/{customerId}
          method: PUT
  # deleteCustomer:
  #   handler: api.deleteCustomer
  #   name: delete-customer
  #   memorySize: 128
  #   timeout: 5
  #   events:
  #     - http:
  #         path: customer/{customerId}
  #         method: DELETE
  getAllCustomer:
    handler: api.getAllCustomer
    name: get-all-customer
    memorySize: 128
    timeout: 5
    events:
      - http:
          path: customers
          method: GET
resources:
  Resources:
    customersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.settings.CUSTOMERS_TABLE}
        AttributeDefinitions:
          - AttributeName: customerId
            AttributeType: S
        KeySchema:
          - AttributeName: customerId
            keyType: HASH
        provisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
